@use "colors" as c;

@mixin troubleshoot {
    border: 3px solid red;
}

@mixin flex(
    $flex-direction: false,
    $flex-wrap: false,
    $justify-content: false,
    $align-items: false
) {
    display: flex;
    @if $flex-direction {
        flex-direction: $flex-direction;
    }
    @if $flex-wrap {
        flex-wrap: $flex-wrap;
    }
    @if $justify-content {
        justify-content: $justify-content;
    }
    @if $align-items {
        align-items: $align-items;
    }
}

@mixin glitch {
    [glitch] {
        display: inline-block;
        position: relative;
    }
    [glitch]:after {
        --slice-0: inset(50% 0 50% 0%);
        --slice-1: inset(0 0 50% 0);
        --slice-2: inset(0 0 0 0);
        --slice-3: inset(50% 0 0 0);
        content: attr(glitch);
        /*     change to whatever color, default green */
        color: c.$violet-secondary;
        visibility: visible;
        position: absolute;
        display: block;
        /*     how big the text needs to scale compared to its original size */
        transform: scale(1.25);
        -webkit-clip-path: var(--slice-0);
        clip-path: var(--slice-0);
        top: 0;
        animation: glitchback 0.04s reverse;
        animation-timing-function: step-end;
    }
    [glitch]:hover {
        visibility: hidden;
        transition: visibility 0.2s;
    }
    [glitch]:hover:after {
        --slice-2: inset(0% 0% 0 0);
        -webkit-clip-path: var(--slice-2);
        clip-path: var(--slice-2);
        animation: glitch 0.04s;
        animation-timing-function: step-end;
    }
    @keyframes glitch {
        0% {
            -webkit-clip-path: var(--slice-0);
            clip-path: var(--slice-0);
        }
        10% {
            -webkit-clip-path: var(--slice-1);
            clip-path: var(--slice-1);
        }
        to {
            -webkit-clip-path: var(--slice-2);
            clip-path: var(--slice-2);
        }
    }
    @keyframes glitchback {
        0% {
            -webkit-clip-path: var(--slice-0);
            clip-path: var(--slice-0);
        }
        10% {
            -webkit-clip-path: var(--slice-3);
            clip-path: var(--slice-3);
        }
        to {
            -webkit-clip-path: var(--slice-2);
            clip-path: var(--slice-2);
        }
    }
}

@mixin button-animation {
    [type="button"],
    .button {
        -webkit-appearance: button;
        background-color: c.$black-secondary;
        background-image: none;
        font-family: "Prompt";
    }

    .button:before {
        content: "";
        position: absolute;
        top: 100%;
        left: -40%;
        width: 300%;
        height: 400%;
        background-color: var(--color-main);
        transition: all 0.3s ease-in-out;
        transform: rotate(-45deg);
    }

    .button:hover:before {
        top: 0;
        left: -160%;
        width: 380%;
        height: 800%;
        background: c.$violet-secondary;
    }

    span {
        transition: all 0.3s ease-in-out;
        display: block;
        height: 100%;
        position: relative;
        top: 0;
    }

    .button:hover span {
        top: -100% !important;
    }

    span:after {
        content: attr(data-text);
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        height: 100%;
        color: c.$white-primary;
    }
}

@mixin link-animation {
    .nav-link {
        text-decoration: none;
        text-decoration-color: none;
        color: c.$violet-secondary;
        position: relative;
        padding-bottom: 2px;
    }
    .nav-link::before {
        position: absolute;
        content: "";
        width: 100%;
        height: 2px;
        background-color: c.$violet-secondary;
        transform: scale(1,1);
        transition: background-color .5s ease-in-out;
        bottom: 0px;
    }
    .nav-link:hover::before {
        animation: link ease 0.5s 1 300ms;
        transform-origin: right;
    }
    @keyframes link {
        50%{
            transform: scaleX(0);
        }
        50.1% {
            transform: translateX(-100%) scalex( -0.01);
        }
        100% {
            transform: translateX(-100%) scalex(-1);
        }
    }
}

.animated-border {
    position: absolute;
    inset: 0;
    top: 50%;
    left: 0;
    height: 100%;
    background: conic-gradient(
        transparent 50deg,
        c.$black-secondary 80deg,
        transparent 100deg
    );
    filter: blur(10px);
    border-radius: 16px;
    transform-origin: center;
    animation: border-animation -0.64s linear 4s infinite;
    will-change: transform;
}

@keyframes border-animation {
    0% {
        transform: translateY(-25%) translateX(40%) rotate(0deg);
    }

    30% {
        transform: translateY(0) translateX(0) rotate(90deg) scaleX(0.7);
    }

    50% {
        transform: translateY(-25%) translateX(-40%) rotate(180deg);
    }

    70% {
        transform: translateY(0) translateX(0) rotate(270deg) scaleX(0.7);
    }

    to {
        transform: translateY(-25%) translateX(40%) rotate(1turn);
    }
}

.cursor {
    color: #FF6188;
    font-weight: bold;
    animation: blink-animation 2s steps(3, start) infinite;
}
@keyframes blink-animation {
    to {
        visibility: hidden;
    }
}
@-webkit-keyframes blink-animation {
    to {
        visibility: hidden;
    }
}

@media only screen and (max-width: 900px) {
    * {
        font-size: 14px;
    }
    #definitions-window {
        min-width: 27.5rem;
        margin: 4rem;
    }
    #repl-window, .delineation, .hide{
        display: none;
    }
}
